<?xml version="1.0" ?>
<sfc zoom="1.0" canvas="11 14" execution-mode="Callable" version="7.9.0 (b2016101208)" timestamp="Mon Feb 27 13:36:27 CST 2017" hot-editable="false" persist-state="false">
	<step id="eb2791f6-6e1d-11d9-a86e-006008c66680" location="4 1" name="S88Begin_13845" factory-id="begin-step">		<associated-data>{}</associated-data>
	</step>
	<step id="41f25729-68f4-4e91-95e8-4fa898688171" location="4 2" name="Start" factory-id="action-step">
		<start-script>def onStart(chart, step):
	"""
	This will run when the step starts, before any
	other action.

	Arguments:
		chart: A reference to the chart's scope.
		step: A reference to this step's scope.
	"""
	
	from ils.sfc.gateway.api import getChartLogger
	log = getChartLogger(chart)		
	log.info("Starting the C3ClampDataCollection chart...")</start-script>
		<associated-data>{}</associated-data>
	</step>
	<step id="46396970-6b64-11d9-a9ad-00022dc3c8fd" location="1 6" name="SingleRx" factory-id="action-step">
		<start-script>'''
 Calculate the R1 &amp; R2 Setpoint Clamp Low and High Limits. 
'''

import system
from ils.sfc.gateway.api import s88Set, s88Get, getDatabaseName, getProviderName, fetchRecipeDataValue, getChartLogger
from ils.sfc.common.constants import LOCAL_SCOPE, SUPERIOR_SCOPE, PHASE_SCOPE, OPERATION_SCOPE, GLOBAL_SCOPE
from ils.sfc.gateway.api import postToQueue
from ils.common.error import catch

def onStart(chart,block):
	provider = getProviderName(chart)
	database = getDatabaseName(chart)
	log = getChartLogger(chart)
	log.tracef("In %s...", block.get("name",""))

	rxConfig = "single-rx"

	r1C3Conv = fetchRecipeDataValue(rxConfig,"r1-c3-conversion","value",database)
	mainC2Rate = fetchRecipeDataValue(rxConfig,"main-c2-rate","value",database)
	mainC3ToC2Ratio = fetchRecipeDataValue(rxConfig,"main-c3-to-c2-ratio","value",database)
	log.tracef("Fetched current configuration data: r1C3Conv=%s, mainC2Rate=%s, mainC3ToC2Ratio=%s", str(r1C3Conv), str(mainC2Rate), str(mainC3ToC2Ratio))

	if r1C3Conv == None or mainC2Rate == None or mainC3ToC2Ratio == None:
		txt = "No data found for one or more of the current r1-c3-conversion, main-c2-rate, and main-c3-to-c2-ratio for a single reactor configuration."
		log.warnf(txt)
		postToQueue(chart, "warning", txt) 
		r1C3Spcl = 0.0
		r2C3Spcl = 0.0
	else:
		r1C3Rate = mainC2Rate * mainC3ToC2Ratio
		r1C3Spcl = (100.0 - r1C3Conv) * r1C3Rate / 100.0
		r2C3Spcl = 0.0
	
		# Clamp the SPCL value at "0.0" if negative to prevent store issues. 
		if (r1C3Spcl &lt; 0.0):
			r1C3Spcl = 0.0

	s88Set(chart, block, "r1-c3-flow-spcl.value", r1C3Spcl, OPERATION_SCOPE)
	s88Set(chart, block, "r2-c3-flow-spcl.value", r2C3Spcl, OPERATION_SCOPE)
	log.tracef("%s has completed!",block.get("name",""))</start-script>
		<associated-data>{}</associated-data>
	</step>
	<step id="4515c45a-6e1f-11d9-a86e-006008c66680" location="3 6" name="SeriesRx" factory-id="action-step">
		<start-script>'''
 Calculate the R1 &amp; R2 Setpoint Clamp Low and High Limits. 
'''

import system
from ils.sfc.gateway.api import s88Set, s88Get, getDatabaseName, getProviderName, fetchRecipeDataValue, getChartLogger
from ils.sfc.common.constants import LOCAL_SCOPE, SUPERIOR_SCOPE, PHASE_SCOPE, OPERATION_SCOPE, GLOBAL_SCOPE
from ils.sfc.gateway.api import postToQueue
from ils.common.error import catch

def onStart(chart,block):
	print "Starting..."
	provider = getProviderName(chart)
	database = getDatabaseName(chart)
	log = getChartLogger(chart)
	log.tracef("In %s...", block.get("name",""))

	rxConfig = "series-rx"

	r1C3Conv = fetchRecipeDataValue(rxConfig,"r1-c3-conversion","value",database)
	mainC2Rate = fetchRecipeDataValue(rxConfig,"main-c2-rate","value",database)
	mainC3ToC2Ratio = fetchRecipeDataValue(rxConfig,"main-c3-to-c2-ratio","value",database)
	tC3Conv = fetchRecipeDataValue(rxConfig,"total-c3-conversion","value",database)
	r2C2Rate = fetchRecipeDataValue(rxConfig,"r2-c2-rate","value",database)
	r2C3ToC2Ratio = fetchRecipeDataValue(rxConfig,"r2-c3-to-c2-ratio","value",database)
	
	log.tracef("Fetched current configuration data: r1C3Conv=%s, mainC2Rate=%s, mainC3ToC2Ratio=%s, tC3Conv=%s, r2C2Rate=%s, r2C3ToC2Ratio=%s", str(r1C3Conv), str(mainC2Rate), str(mainC3ToC2Ratio), str(tC3Conv), str(r2C2Rate), str(r2C3ToC2Ratio))

	if r1C3Conv == None or mainC2Rate == None or mainC3ToC2Ratio == None or tC3Conv == None or r2C2Rate == None or r2C3ToC2Ratio == None:
		txt = "No data found for one or more of: r1C3Conv, mainC2Rate, mainC3ToC2Ratio, tC3Conv, r2C2Rate or r2C3ToC2Ratio for %s reactor configuration." % (rxConfig)
		log.warnf(txt)
		postToQueue(chart, "warning", txt) 
		r1C3Spcl = 0.0
		r2C3Spcl = 0.0
	else:
		r1C3Rate = mainC2Rate * mainC3ToC2Ratio
		r2C3Rate = r2C2Rate * r2C3ToC2Ratio
		r1C3Spcl = (100.0 - r1C3Conv) * r1C3Rate / 100.0
		r2C3Spcl = (100.0 - tC3Conv) * ((r2C3Rate + r1C3Rate) / 100.0) - r1C3Spcl
	
		# Clamp the SPCL values at "0.0" if negative to prevent store issues. 
		if (r1C3Spcl &lt; 0.0):
			r1C3Spcl = 0.0
	
		if (r2C3Spcl &lt; 0.0):
			r2C3Spcl = 0.0

	s88Set(chart, block, "r1-c3-flow-spcl.value", r1C3Spcl, OPERATION_SCOPE)
	s88Set(chart, block, "r2-c3-flow-spcl.value", r2C3Spcl, OPERATION_SCOPE)
	log.tracef("%s has completed!",block.get("name",""))</start-script>
		<associated-data>{}</associated-data>
	</step>
	<step id="4515c45f-6e1f-11d9-a86e-006008c66680" location="5 6" name="SplitRx" factory-id="action-step">
		<start-script>'''
 Calculate the R1 &amp; R2 Setpoint Clamp Low and High Limits. 
'''

import system
from ils.sfc.gateway.api import s88Set, s88Get, getDatabaseName, getProviderName, fetchRecipeDataValue, getChartLogger
from ils.sfc.common.constants import LOCAL_SCOPE, SUPERIOR_SCOPE, PHASE_SCOPE, OPERATION_SCOPE, GLOBAL_SCOPE
from ils.sfc.gateway.api import postToQueue
from ils.common.error import catch

def onStart(chart,block):
	provider = getProviderName(chart)
	database = getDatabaseName(chart)
	log = getChartLogger(chart)
	log.tracef("In %s...", block.get("name",""))

	# Not sure if this should just be "split-rx"
	rxConfig = "split-fd-rx"

	mainC2Rate = fetchRecipeDataValue(rxConfig,"main-c2-rate","value",database)
	mainC3ToC2Ratio = fetchRecipeDataValue(rxConfig,"main-c3-to-c2-ratio","value",database)
	mainToR2Split = fetchRecipeDataValue(rxConfig,"r1-to-total-split","value",database)
	tC3Conv = fetchRecipeDataValue(rxConfig,"r1-c3-conversion","value",database)
	r2C2Rate = fetchRecipeDataValue(rxConfig,"r2-c2-rate","value",database)
	r2C3ToC2Ratio = fetchRecipeDataValue(rxConfig,"r2-c3-to-c2-ratio","value",database)
	
	log.tracef("Fetched current configuration data: mainC2Rate=%s, mainC3ToC2Ratio=%s, mainToR2Split=%s, tC3Conv=%s, r2C2Rate=%s, r2C3ToC2Ratio=%s", str(mainC2Rate), str(mainC3ToC2Ratio), str(mainToR2Split), str(tC3Conv), str(r2C2Rate), str(r2C3ToC2Ratio))

	if 	mainC2Rate == None or mainC3ToC2Ratio == None or mainToR2Split == None or tC3Conv == None or r2C2Rate == None or r2C3ToC2Ratio == None:
		txt = "No data found for one or more of: mainC2Rate, mainC3ToC2Ratio, mainToR2Split, tC3Conv, r2C2Rate or r2C3ToC2Ratio for %s reactor configuration." % (rxConfig)
		log.warnf(txt)
		postToQueue(chart, "warning", txt) 
		r1C3Spcl = 0.0
		r2C3Spcl = 0.0
	
	else:
		r1C3Rate = mainC2Rate * mainC3ToC2Ratio
		r2C3Rate = r2C2Rate * r2C3ToC2Ratio
		targetC3Flow = (100.0 - tC3Conv) * (r1C3Rate + r2C3Rate) / 100.0
		r1C3Spcl = targetC3Flow * mainToR2Split
		r2C3Spcl = targetC3Flow - r1C3Spcl
	
		# Clamp the SPCL values at "0.0" if negative to prevent store issues. 
		if (r1C3Spcl &lt; 0.0):
			r1C3Spcl = 0.0
	
		if (r2C3Spcl &lt; 0.0):
			r2C3Spcl = 0.0

	s88Set(chart, block, "r1-c3-flow-spcl.value", r1C3Spcl, OPERATION_SCOPE)
	s88Set(chart, block, "r2-c3-flow-spcl.value", r2C3Spcl, OPERATION_SCOPE)
	log.tracef("%s has completed!",block.get("name",""))</start-script>
		<associated-data>{}</associated-data>
	</step>
	<step id="b6c910d8-c754-11e4-9591-00142223a71b" location="7 5" name="S88ShowWorkspace_13834" factory-id="com.ils.showWindowStep"><description></description><scale>1.0</scale><windowTitle>Divert Reminder</windowTitle><buttonLabel>Divert</buttonLabel><security>private</security><name>S88ShowWorkspace_13834</name><id>b6c910d8-c754-11e4-9591-00142223a71b</id><position>center</position><window>Vistalon/SFC/Catout CRx Divert Reminder</window>		<associated-data>{}</associated-data>
	</step>
	<step id="4515c464-6e1f-11d9-a86e-006008c66680" location="7 6" name="C_Rx" factory-id="action-step">
		<start-script>'''
 Calculate the R1 &amp; R2 Setpoint Clamp Low and High Limits. 
'''

import system
from ils.sfc.gateway.api import s88Set, s88Get, getDatabaseName, getProviderName, fetchRecipeDataValue, getChartLogger
from ils.sfc.common.constants import LOCAL_SCOPE, SUPERIOR_SCOPE, PHASE_SCOPE, OPERATION_SCOPE, GLOBAL_SCOPE
from ils.sfc.gateway.api import postToQueue
from ils.common.error import catch

def onStart(chart,block):
	provider = getProviderName(chart)
	database = getDatabaseName(chart)
	log = getChartLogger(chart)
	log.tracef("In %s...", block.get("name",""))

	rxConfig = "c-rx"

	tC3Conv = fetchRecipeDataValue(rxConfig,"c3-conv","value",database)
	r1C3Rate = fetchRecipeDataValue(rxConfig,"main-c3-rate","value",database)
	r2C3Rate = fetchRecipeDataValue(rxConfig,"ss-c3-rate","value",database)

	if tC3Conv == None or r1C3Rate == None or r2C3Rate == None:
		txt = "No data found for one or more of: tC3Conv, r1C3Rate or r2C3Rate for %s reactor configuration." % (rxConfig)
		log.errorf(txt)
		postToQueue(chart, "warning", txt) 
		r1C3Spcl = 0.0
		r2C3Spcl = 0.0
	else:
		r1C3Spcl = (100.0 - tC3Conv) * r1C3Rate / 100.0
		r2C3Spcl = (100.0 - tC3Conv) * r2C3Rate / 100.0
	
		# Clamp the SPCL values at "0.0" if negative to prevent store issues. 
		if (r1C3Spcl &lt; 0.0):
			r1C3Spcl = 0.0
	
		if (r2C3Spcl &lt; 0.0):
			r2C3Spcl = 0.0

	s88Set(chart, block, "r1-c3-flow-spcl.value", r1C3Spcl, OPERATION_SCOPE)
	s88Set(chart, block, "r2-c3-flow-spcl.value", r2C3Spcl, OPERATION_SCOPE)
	s88Set(chart, block, "r1-c3-flow-sp.value", r1C3Spcl, OPERATION_SCOPE)
	s88Set(chart, block, "r2-c3-flow-sp.value", r2C3Spcl, OPERATION_SCOPE)

	# Calculate the sidestream monomer setpoint reduction due to spcl of R2 on C3=. 
#	sleep(system.tag.read("[]Site/G2-LATENCY-TIME").getValue())
#	s88CatoutCReactor.collect(chart,block,currentDataBlock)
	log.tracef("%s has completed!",block.get("name",""))</start-script>
		<associated-data>{}</associated-data>
	</step>
	<step id="173be499-e5e1-4158-9121-42a8731097c5" location="7 7" name="1" factory-id="com.ils.timedDelayStep"><postNotification>false</postNotification><recipeLocation>local</recipeLocation><tagPath></tagPath><description></description><scale>1.0</scale><windowTitle></windowTitle><message></message><buttonLabel></buttonLabel><delay>5.0</delay><name>1</name><callback></callback><id>173be499-e5e1-4158-9121-42a8731097c5</id><position>center</position><strategy>static</strategy><key></key><delayUnit>SEC</delayUnit>		<associated-data>{}</associated-data>
	</step>
	<step id="501e4e7e-6e3f-11d9-a86e-006008c66680" location="1 11" name="C3_RampFlags" factory-id="action-step">
		<start-script>'''
 Determine if there is a C3 ramp based on the R1 &amp; R2 C3 setpoint clamp 
 low limits and the minimum C3 rate. 
'''

import system
from ils.sfc.gateway.api import s88Set, s88Get, getDatabaseName, getProviderName, getChartLogger
from ils.sfc.common.constants import LOCAL_SCOPE, SUPERIOR_SCOPE, PHASE_SCOPE, OPERATION_SCOPE, GLOBAL_SCOPE

def onStart(chart,block):
	provider = getProviderName(chart)
	log = getChartLogger(chart)
	log.tracef("In %s, determining C3 ramp, getting flows...", block.get("name",""))
  
	r1C3Spcl = s88Get(chart, block, "r1-c3-flow-spcl.value", OPERATION_SCOPE)
	r2C3Spcl = s88Get(chart, block, "r2-c3-flow-spcl.value", OPERATION_SCOPE)
	minimumC3Rate = s88Get(chart, block, "minimum-c3-rate.value", OPERATION_SCOPE)

	log.tracef("  ...determining if there is a ramp...")
	c3Ramp = (r1C3Spcl &gt; minimumC3Rate) or (r2C3Spcl &gt; minimumC3Rate)
	log.tracef("   C3 ramp: %s", str(c3Ramp))

	s88Set(chart, block, "c3-ramp.value", c3Ramp, OPERATION_SCOPE)
	log.tracef("%s has completed!",block.get("name",""))</start-script>
		<associated-data>{}</associated-data>
	</step>
	<step id="c3c70260-9a22-4e77-be22-c7dbb1ade574" location="7 9" name="DataCollect" factory-id="action-step">
		<start-script>'''
 Based on the calculated R2 Setpoint Clamp Low, set the setpoints of the 
 monomer sidestream flows each to 1/6 of the setpoint clamp low (since six sidestreams).
'''

import system
from ils.sfc.gateway.api import s88Set, s88Get, getDatabaseName, getProviderName, fetchRecipeDataValue, getChartLogger
from ils.sfc.common.constants import LOCAL_SCOPE, SUPERIOR_SCOPE, PHASE_SCOPE, OPERATION_SCOPE, GLOBAL_SCOPE
from ils.sfc.gateway.api import postToQueue
from ils.common.error import catch

def onStart(chart,block):
	provider = getProviderName(chart)
	database = getDatabaseName(chart)
	log = getChartLogger(chart)
	log.tracef("In %s...", block.get("name",""))

	rxConfig = "c-rx"

	ssC2Flow = fetchRecipeDataValue(rxConfig,"ss-c2-rate","value",database)
	ssC3Flow = fetchRecipeDataValue(rxConfig,"ss-c3-rate","value",database)
	r2C3Spcl = fetchRecipeDataValue(rxConfig,"r2-c3-flow-spcl","value",database)
	
	if ssC2Flow == None or ssC3Flow == None or r2C3Spcl == None:
		txt = "No data found for one or more of: ssC2Flow, ssC3Flow or r2C3Spcl for %s reactor configuration." % (rxConfig)
		log.errorf(txt)
		postToQueue(chart, "warning", txt) 
		r1C3Spcl = 0.0
		r2C3Spcl = 0.0

		for i in range(1,7):
			key = "r2-ss%d-c3-flow-sp.value" % (i)
			s88Set(chart, block, key, 0.0, OPERATION_SCOPE)

	else:
		ssFlow=[]
		for controller in ["VRF214-1", "VRF224-1", "VRF234-1", "VRF244-1", "VRF254-1", "VRF264-1"]:
			tagName = "[%s]SFC IO/Fast Scan Data/%s/sp/value" % (provider, controller)
			qv = system.tag.read(tagName)
			if qv.quality.isGood():
				ssFlow.append(qv.value)
			else:
				ssFlow.append(0.0)
		log.tracef("The sidestream setpoints are: %s", str(ssFlow))
	
		ssC3Flow = ssC3Flow - r2C3Spcl
		if ssC3Flow &lt; 0:
			ssC3Flow = 0

		ssC3Cut = (ssC3Flow + ssC2Flow) / 6.0
		log.tracef("The sidestream C3 cut is: %s", str(ssC3Cut))
		
		for i in range(1,7):
			flow = ssFlow[i - 1] - ssC3Cut
			if flow &lt; 0:
				flow = 0.0
			key = "r2-ss%d-c3-flow-sp.value" % (i)
			log.tracef("Saving %f to %s", flow, key)
			s88Set(chart, block, key, flow, OPERATION_SCOPE)

	log.tracef("%s has completed!",block.get("name",""))</start-script>
		<associated-data>{}</associated-data>
	</step>
	<step id="eb2791f1-6e1d-11d9-a86e-006008c66680" location="1 12" name="S88End_13844" factory-id="end-step">		<associated-data>{}</associated-data>
	</step>
	<transition id="248889f6-6e1e-11d9-a86e-006008c66680" location="1 4" timeout-delay="5000" timeout-flag="foo">{tag.Recipe/Local/SINGLE-RX-GRADE}</transition>
	<transition id="248889ea-6e1e-11d9-a86e-006008c66680" location="3 4" timeout-delay="5000" timeout-flag="foo">{tag.Recipe/Local/SERIES-RX-GRADE}</transition>
	<transition id="248889f0-6e1e-11d9-a86e-006008c66680" location="5 4" timeout-delay="30000" timeout-flag="S88-CONDITIONAL-TRANSITION-XXX-13841">{tag.Recipe/Local/SPLIT-FEED-GRADE}</transition>
	<transition id="248889e4-6e1e-11d9-a86e-006008c66680" location="7 4" timeout-delay="30000" timeout-flag="S88-CONDITIONAL-TRANSITION-XXX-13839">{tag.Recipe/Local/C-RX-GRADE}</transition>
	<transition id="dc1533d7-b691-4bf7-a027-bbafd7c35a5e" location="7 8">{previous.workDone}</transition>
	<note id="55d3126e-9eaa-4af5-86aa-44e78e043d70" location="0 1" size="2 1">Configuration Specific Data 
Collection Tasks </note>
	<note id="56be94d6-21a9-45db-af16-8d2369ae1917" location="7 0" size="2 1">Vetted 11/22/2016</note>
	<note id="07859cdc-e6ee-4733-ad80-d6c4341ef877" location="8 7" size="2 1">This should reference some
latency time constant</note>
	<link id="e8129260-2295-4e4b-8be9-19aa551eb761" location="1 3"><down/><right/></link>
	<link id="c58bca69-18c3-4163-88b4-e2634b7a4df6" location="2 3"><left/><right/></link>
	<link id="b0345306-94bc-4cd2-99f1-b48410f74e7f" location="3 3"><left/><down/><right/></link>
	<link id="31c054f7-37d8-4f23-86d7-27bdaaa9df68" location="4 3"><up/><left/><right/></link>
	<link id="ed070392-8536-447d-b83c-5679f7a8d530" location="1 5"><up/><down/></link>
	<link id="f90f991c-a946-4552-8d39-ed9621780ab5" location="3 5"><up/><down/></link>
	<link id="cce198ac-a8be-4078-ac80-f6ba6f0a1ae0" location="5 3"><left/><down/><right/></link>
	<link id="a674a61a-697d-4763-8342-aba6b94402d6" location="6 3"><left/><right/></link>
	<link id="6730c9a2-3161-494b-8ae9-aca2ea716292" location="1 7"><up/><down/><right/></link>
	<link id="f8563b4c-5ccd-4386-a5cd-3db750cd1c9d" location="5 5"><up/><down/><right/></link>
	<link id="aa6a2417-e837-4852-8708-07475acd0f81" location="3 7"><up/><left/><down/><right/></link>
	<link id="334c5892-ce41-4710-97c8-e5da84330f09" location="7 3"><left/><down/></link>
	<link id="2d6509f2-a58e-47d0-be54-f6d50ddf8602" location="1 8"><up/><down/></link>
	<link id="7f6db118-5ed5-4282-9548-90340d840b1c" location="3 8"><up/><down/></link>
	<link id="099460f0-107d-4462-bdd6-a8142b849080" location="5 7"><up/><left/><down/><right/></link>
	<link id="7d0c7d7d-b01a-4ea9-b06a-8f4d9e2ed91f" location="1 9"><up/><down/></link>
	<link id="424577a2-caa0-4d73-bb00-4fdc55ba7b8f" location="5 8"><up/><down/></link>
	<link id="f7dc5230-e009-4014-b02f-10430794ffb4" location="3 9"><up/><down/></link>
	<link id="dd1d1fa6-a437-4c65-9851-9d77c60db112" location="1 10"><up/><down/><right/></link>
	<link id="96369f34-682b-4a92-9267-d36c9b49aca5" location="2 10"><left/><right/></link>
	<link id="caff1a18-0502-4c79-a10b-edf7d93cb328" location="5 9"><up/><down/></link>
	<link id="0a9b2654-8b28-4be1-95cf-7c5149494952" location="3 10"><up/><left/><right/></link>
	<link id="13e75d2c-de3b-4c7f-a139-2551481443a3" location="4 10"><left/><right/></link>
	<link id="a39dbb71-d5de-4abb-a71a-bb60b263c75a" location="5 10"><up/><left/><right/></link>
	<link id="1e1783ec-dd0c-43db-87f6-0582e391dc93" location="6 10"><up/><left/><right/></link>
	<link id="292cba36-4dc7-4acb-8f0c-ea7bfc44a1f4" location="7 10"><up/><left/><down/></link>

</sfc>
